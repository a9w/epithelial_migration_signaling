"""Functions for measuring aspects of a labeled image."""

import numpy as np
import pandas as pd
from skimage.measure import label, regionprops, regionprops_table
from ..segment import select_in_field
from ..utils import validate_mask
from .region import measure_one_hemijunction

def measure_hemijunctions(im_labels, im_labels_hjs):
    """
    Measure all hemijuctions of a 2D tissue labeled with a cell membrane marker.

    Ignores all hemijunctions that are sent or received by a region in im_labels
    that has a label of 0.

    Parameters
    ----------
    im_labels : 2D ndarray
        Segmented micrograph
    im_labels_hjs : 2D ndarray
        Segmented hemijunctions

    Returns
    -------
    df_hjs : a pandas dataframe
        A separate row for each hemijunction with traits.
    """
    # A pandas dataframe to store the hemijuction traits
    df_hjs = pd.DataFrame()
    for cell_r_lab in np.unique(im_labels):
        for cell_s_lab in np.unique((im_labels == cell_r_lab) * im_labels_hjs):
            if cell_r_lab != 0 and cell_s_lab != 0:
                cell_s = im_labels == cell_s_lab
                cell_r = im_labels == cell_r_lab
                hj_s_to_r = np.logical_and(
                    im_labels_hjs == cell_s_lab, im_labels == cell_r_lab
                )
                hj_r_to_s = np.logical_and(
                    im_labels_hjs == cell_r_lab, im_labels == cell_s_lab
                )
                interface = np.logical_or(hj_s_to_r, hj_r_to_s)
                try:
                    hj_traits = measure_one_hemijunction(cell_s, cell_r, interface)
                    hj_traits["cell_s_lab"] = cell_s_lab
                    hj_traits["cell_r_lab"] = cell_r_lab
                    hj_traits["cell_r_area_px"] = np.sum(cell_r)
                    hj_traits["cell_s_area_px"] = np.sum(cell_s)
                    df_hjs = df_hjs.append(hj_traits, ignore_index=True)
                except Exception:
                    print(f"    Failed for cell_s {cell_s_lab} & cell_r {cell_r_lab}")
    return df_hjs


def measure_hemijunctions_timelapse(ims_labels, ims_labels_hjs):
    """
    Measure the hemijunction traits from a timelapse of a live-imaged epithelium.

    Parameters
    ----------
    ims_labels : 3D ndarray (t,y,x)
        Each timepoint is a 2D array with labeled regions.
    ims_labels_hjs : 3D ndarray (t,y,x)
        Each timepoint is a 2D array with hemijunctions labeled such that each one
        has the same label as its "sending cell". Each "interface" spans a cell-cell
        junction and is composed of two hemijunctions.

    Returns
    -------
    df_hjs : pandas DataFrame
        Each row is a single hemijunction from a single time step.
    """
    # Total number of frames
    total_t = np.shape(ims_labels)[0]
    dfs = []
    for t in range(total_t):
        print(f"Measuring hemijunctions for timepoint {t} out of {total_t - 1}")
        df_tmp = measure_hemijunctions(ims_labels[t], ims_labels_hjs[t])
        # Add a column for t_step
        df_tmp["t_step"] = [t] * len(df_tmp.index)
        dfs.append(df_tmp)
    df_hjs = pd.concat(dfs, ignore_index=True)
    return df_hjs


def property_arrays(im, mask=None, props=None, periphery_excluded=True):
    """
    Measure properties of labeled regions in a 2D image.

    Extends the functionality of regionprops_table to incorporate
    a mask and option to exclude regions contacting the mask.

    If no list of properties is supplied, the full regionprops_table
    is returned.

    Note: Labels with value 0 are ignored.

    Parameters
    ----------
    im : 2D ndarray
        Regions labeled with unique values
    mask : bool ndarray
        Optional mask, same shape as im
    props : list of strings
        Each is a label of a column generated by regionprops_table
    periphery_excluded : bool
        Whether regions touching the border or mask
        should be included in the plot

    Returns
    -------
    property_arrays : dict of ndarrays
        See regionprops_table for details
    """
    mask = validate_mask(im, mask)
    im_masked = np.copy(im) * mask

    if periphery_excluded:
        im_masked = im_masked * select_in_field(im_masked, mask)

    if props is None:
        property_arrays = regionprops_table(im_masked)
    else:
        property_arrays = regionprops_table(im_masked, properties=props)

    return property_arrays


def tissue_AP_orientation(tissue_mask):
    """
    Find the orientation of the tissue long axis

    Input
    -----
    tissue_mask: 2d bool array with True at pixels inside tissue

    Output
    ------
    AP_orientation: float, polar. Orientation of the long axis
    of the ellipse approximation of tissue shape. 0 is vertical,
    pi/2 is horizontal.

    """
    tissue_mask_lab = label(tissue_mask)
    props = regionprops(tissue_mask_lab)[0]
    AP_orientation = props['orientation']
    return(AP_orientation)


def tissue_medial_orientation(tissue_mask):
    """
    Find the orientation of the tissue long axis

    Input
    -----
    tissue_mask: 2d bool array with True at pixels inside tissue

    Output
    ------
    medial_orientation: float, polar. Orientation of the long axis
    of the ellipse approximation of tissue shape. 0 is vertical,
    pi/2 is horizontal.

    """

    tissue_mask_lab = label(tissue_mask)
    props = regionprops(tissue_mask_lab)[0]
    medial_orientation = props['orientation'] + np.pi/2
    return(medial_orientation)
